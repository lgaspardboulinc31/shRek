}
else{
if (pal_class == "Villain"){
palettes=villain_palettes
}
else{
palettes=place_palettes
}
}
pal <- palettes[[name]]
if (is.null(pal))
stop("We do not have a palette with this name.")
if (missing(n)) {
n <- length(pal)
}
if (type == "discrete" && n > length(pal)) {
stop("Number of requested colors greater than what palette can offer")
}
out <- switch(type,
continuous = grDevices::colorRampPalette(pal)(n),
discrete = pal[1:n]
)
structure(out, class = "palette", name = name)
}
show_my_swamp<- function(pal, ...) {
# Info df imported while loading package
info_sub = info %>%
filter(palette_name == attributes(pal)$name)
n <- length(pal)
df <- data.frame(xvals = c(1:n), yvals = rep(1, n), text = pal[1:n])
ggplot(df, aes(x = xvals, y = yvals)) + #specifiy axis
geom_tile(fill = pal,
colour = "white",
linewidth = 3) +
geom_text(aes(label=text), color="black", nudge_y = -1) +
theme_void() +
coord_fixed(ratio=1) + #allow constant ratio x/y
theme(plot.title = element_text(hjust = 0.5, face="bold", size=20), #custom titles
plot.subtitle = element_text(hjust = 0.5, size=15, face="italic"),
legend.position = "none") +
labs(title = info_sub$palette_name, subtitle = info_sub$bio) +
theme(plot.margin = margin(0.5,0.5,1,0.5, "cm"))
}
show_my_swamp(burp("Puss_in_Boots", pal_class="Hero"))
library(dplyr)
library(ggplot1)
library(ggplot2)
show_my_swamp(burp("Puss_in_Boots", pal_class="Hero"))
hero_palettes <- list(
Shrek = c("#B0C400","#D5DE2E","#795A2D","#523213","#C3BC95","#D3CCA5"),
Fiona = c("#DEC33E", "#C0B037", "#A25E2E", "#5A5832", "#53432A", "#40473C"),
# Donkey = ,
Puss_in_Boots =c("#F0B56E", "#F4983F", "#B58421", "#6E342C", "#624835", "#90837A"),
Dragon = c("#809737", "#CE603D", "#C25866", "#953644", "#A3534D", "#A80216"),
Gingy = c("#CD524F", "#C5812A", "#BCA7A0", "#6F748C", "#864590"),
Pinocchio= c("#E7B621", "#730000", "#007DAD", "#DCBB82", "#746225")
)
show_my_swamp(burp("Gingy", pal_class="Hero"))
show_my_swamp(burp("Pinocchio", pal_class="Hero"))
show_my_swamp(burp("Dragon", pal_class="Hero"))
names(hero_palettes)
lapply(names(hero_palettes), burp)
lapply(names(hero_palettes), burp(pal_class="Hero"))
lapply(names(hero_palettes), burp(pal_class="Hero"))
lapply(names(hero_palettes), burp(x,pal_class="Hero"))
for (pal in names(hero_palettes)){}
for (pal in names(hero_palettes)){}
for (pal in names(hero_palettes)){burp(pal, pal_class = "Hero")}
hero_palettes <- list(
Shrek = c("#B0C400","#D5DE2E","#795A2D","#523213","#C3BC95","#D3CCA5"),
Fiona = c("#DEC33E", "#C0B037", "#A25E2E", "#5A5832", "#53432A", "#40473C"),
# Donkey = ,
Puss_in_Boots =c("#F0B56E", "#F4983F", "#B58421", "#6E342C", "#624835", "#90837A"),
Dragon = c("#809737", "#CE603D", "#C25866", "#953644", "#A3534D", "#A80216"),
Gingy = c("#CD524F", "#C5812A", "#BCA7A0", "#6F748C", "#864590"),
Pinocchio= c("#E7B621", "#730000", "#007DAD", "#DCBB82", "#746225")
)
for (pal in names(hero_palettes)){burp(pal, pal_class = "Hero")}
for (pal in names(hero_palettes)){burp(pal, pal_class = "Hero")}
for (pal in names(hero_palettes)){cat(pal)}
for (pal in names(hero_palettes)){cat(pal)}
for (pal in names(hero_palettes)){burp(pal, pal_class = "Hero")}
for (pal in names(hero_palettes)){show_my_swamp(burp(pal, pal_class = "Hero"))}
for (pal in names(hero_palettes)){show_my_swamp(burp(pal, pal_class = "Hero"))}
show_my_swamp(burp(pal, pal_class = "Hero"))
show_my_swamp(burp(Shrek, pal_class = "Hero"))
show_my_swamp(burp("Shrek", pal_class = "Hero"))
show_my_swamp(burp("Fiona", pal_class = "Hero"))
show_my_swamp(burp("Puss_in_Boots", pal_class = "Hero"))
show_my_swamp(burp("Dragon", pal_class = "Hero"))
show_my_swamp(burp("Gingy", pal_class = "Hero"))
show_my_swamp(burp("Pinocchio", pal_class = "Hero"))
summary(cars)
summary(iris)
View(iris)
use_package('ggplot2')
library(devtools)
use_package('ggplot2')
document()
load_all()
use_package('dplyr')
document()
load_all()
document()
use_package(ggplot2)
use_package("ggplot2")
document()
library(shRek)
hero_palettes <- list(
Shrek = c("#B0C400","#D5DE2E","#795A2D","#523213","#C3BC95","#D3CCA5"),
Fiona = c("#DEC33E", "#C0B037", "#A25E2E", "#5A5832", "#53432A", "#40473C"),
# Donkey = ,
Puss_in_Boots =c("#F0B56E", "#F4983F", "#B58421", "#6E342C", "#624835", "#90837A"),
Dragon = c("#809737", "#CE603D", "#C25866", "#953644", "#A3534D", "#A80216"),
Gingy = c("#CD524F", "#C5812A", "#BCA7A0", "#6F748C", "#864590"),
Pinocchio= c("#E7B621", "#730000", "#007DAD", "#DCBB82", "#746225")
)
villain_palettes <- list(
Fairy_Godmother=c("#617F95", "#4E6C7F", "#A4AEBE", "#B1C9E0", "#E6CFDE", "#D69D9E"),
Charming =c("#EEECD8", "#C49F3C", "#3698B7", "#596979", "#032A5C", "#0E1319"),
Lord_Farquaad=c("#FFB841", "#D8332F", "#B50128", "#A69D7B", "#0F5381", "#050917"),
Rumpelstiltskin = c("#C8562A", "#5E7E72", "#946D58", "#EAA13D", "#594B3A", "#AE6441")
)
place_palettes <- list(
Duloc = c("#72767D", "#D2D0BD", "#AEB5C3", "#737F9D", "#262C44", "#181B17"),
Far_Far_Away = c("#929BD4", "#F2C27F", "#CE9671", "#893F31", "#AC9E54", "#373F0D"),
Dragon_Keep = c("#E31A2D", "#C20F33", "#813666", "#584B96", "#542F4D", "#2C304A"),
Swamp=c("#B27D4B", "#9A872C", "#465013", "#2F3A13", "#605324", "#222612")#,
)
#' Complete list of palettes
#'
#' Use \code{\link{wes_palette}} to construct palettes of desired length.
#'
#' @export
hero_palettes <- list(
Shrek = c("#B0C400","#D5DE2E","#795A2D","#523213","#C3BC95","#D3CCA5"),
Fiona = c("#DEC33E", "#C0B037", "#A25E2E", "#5A5832", "#53432A", "#40473C"),
# Donkey = ,
Puss_in_Boots =c("#F0B56E", "#F4983F", "#B58421", "#6E342C", "#624835", "#90837A"),
Dragon = c("#809737", "#CE603D", "#C25866", "#953644", "#A3534D", "#A80216"),
Gingy = c("#CD524F", "#C5812A", "#BCA7A0", "#6F748C", "#864590"),
Pinocchio= c("#E7B621", "#730000", "#007DAD", "#DCBB82", "#746225")
)
villain_palettes <- list(
Fairy_Godmother=c("#617F95", "#4E6C7F", "#A4AEBE", "#B1C9E0", "#E6CFDE", "#D69D9E"),
Charming =c("#EEECD8", "#C49F3C", "#3698B7", "#596979", "#032A5C", "#0E1319"),
Lord_Farquaad=c("#FFB841", "#D8332F", "#B50128", "#A69D7B", "#0F5381", "#050917"),
Rumpelstiltskin = c("#C8562A", "#5E7E72", "#946D58", "#EAA13D", "#594B3A", "#AE6441")
)
place_palettes <- list(
Duloc = c("#72767D", "#D2D0BD", "#AEB5C3", "#737F9D", "#262C44", "#181B17"),
Far_Far_Away = c("#929BD4", "#F2C27F", "#CE9671", "#893F31", "#AC9E54", "#373F0D"),
Dragon_Keep = c("#E31A2D", "#C20F33", "#813666", "#584B96", "#542F4D", "#2C304A"),
Swamp=c("#B27D4B", "#9A872C", "#465013", "#2F3A13", "#605324", "#222612")#,
)
#' @title Information about the Colour Palettes
#' @description This dataframe contains the backstory or inspiration behind each color palette.
#'
info <- data.frame(
palette_name=c(
#heroes
"Shrek",
"Fiona",
"Donkey",
"Puss_in_Boots",
"Dragon",
"Gingy",
"Pinocchio",
#vilains
"Fairy_Godmother",
"Charming",
"Lord_Farquaad",
"Rumpelstiltskin",
#places
"Duloc",
"Far_Far_Away",
"Dragon_Keep",
"Swamp"
),
bio=c(
#heroes
"Our hero",
"The badass girl",
"Shrek's best friend",
"Shrek's adopted best friend",
"The keeper of Fiona and Donkey's lover",
"The bravest cookie",
"More human than you think",
# vilain
"The vilain in Shrek 2",
"The handsome son of Fairy Godmother",
"The vilain in Shrek 1",
"The vilain in Shrek 3",
#places
"Lord Farquaad's castle",
"Fiona's parent kingdom",
"Where Fiona has been locked",
"Shrek's House"
)
)
#' A Shrek palette generator
#'
#'
#'
#'
#'
#'
burp <- function(name,pal_class=c("Hero","Villain","Place"), n, type = c("discrete", "continuous")) {
type <- match.arg(type)
if (pal_class == "Hero"){
palettes=hero_palettes
}
else{
if (pal_class == "Villain"){
palettes=villain_palettes
}
else{
palettes=place_palettes
}
}
pal <- palettes[[name]]
if (is.null(pal))
stop("We do not have a palette with this name.")
if (missing(n)) {
n <- length(pal)
}
if (type == "discrete" && n > length(pal)) {
stop("Number of requested colors greater than what palette can offer")
}
out <- switch(type,
continuous = grDevices::colorRampPalette(pal)(n),
discrete = pal[1:n]
)
structure(out, class = "palette", name = name)
}
show_my_swamp<- function(pal, ...) {
# Info df imported while loading package
info_sub = info %>%
filter(palette_name == attributes(pal)$name)
n <- length(pal)
df <- data.frame(xvals = c(1:n), yvals = rep(1, n), text = pal[1:n])
ggplot(df, aes(x = xvals, y = yvals)) + #specifiy axis
geom_tile(fill = pal,
colour = "white",
linewidth = 3) +
geom_text(aes(label=text), color="black", nudge_y = -1) +
theme_void() +
coord_fixed(ratio=1) + #allow constant ratio x/y
theme(plot.title = element_text(hjust = 0.5, face="bold", size=20), #custom titles
plot.subtitle = element_text(hjust = 0.5, size=15, face="italic"),
legend.position = "none") +
labs(title = info_sub$palette_name, subtitle = info_sub$bio) +
theme(plot.margin = margin(0.5,0.5,1,0.5, "cm"))
}
library(shRek)
library(shRek)
ggplot(iris, mapping(y=Sepal.length, x=Species)) + geom_boxplot()
ggplot(iris, aes(y=Sepal.length, x=Species)) + geom_boxplot()
ggplot(iris, aes(y=Sepal.Length, x=Species)) + geom_boxplot()
ggplot(iris, aes(y=Sepal.Length, x=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
View(movies)
library(shRek)
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
#
show_my_swamp(shrek_color)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
library(shRek)
library(shRek)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
covid19 = read.csv("./data/covid19_drees_data.csv")
head(covid19)
covid19 = read.csv("./data/covid19_drees_data.csv", sep=";")
head(covid19)
## First let's pick Rumpelstiltskin palette
Rumpe_cols = burp("Rumpelstiltskin","Villain",n=3)
Rumpe_cols
show_my_swamp(Rumpe_cols)
covid19[1:60,]
# Make the plot
ggplot(data=covid19[1:60,], aes(x=date, y=nb_PCR, fill=vac_statut)) + geom_line()
# Make the plot
ggplot(data=covid19[1:60,], aes(x=date, y=nb_PCR)) + geom_line()
# Make the plot
ggplot() +
geom_line(data=covid19[1:60,"vac_statut"=="Primo dose récente"])
# Make the plot
ggplot() +
geom_line(data=covid19[1:60,"vac_statut"=="Primo dose récente"])
# Make the plot
ggplot() +
geom_line(data=covid19[1:60,covid19$vac_statut=="Primo dose récente"])
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",])
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",],aes(x=data, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",],aes(x=date, y=nb_PCR))
covid19[covid19$vac_statut=="Primo dose récente",]
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",nb_PCR],aes(x=date, y=nb_PCR))
covid19[covid19$vac_statut=="Primo dose récente",nb_PCR]
covid19[covid19$vac_statut=="Primo dose récente","nb_PCR"]
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente","nb_PCR"],aes(x=date, y=nb_PCR))
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR"],aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR")],aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR")],aes(x=date, y=nb_PCR))
summary(covid19)
ggplot(data=covid19, aes(x=date, y=nb_PCR))
ggplot(data=covid19, aes(x=date, y=nb_PCR))+ geom_point()
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR")]
sub_covid19
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut=="Primo dose récente",c("date","vac_statut","nb_PCR")]
sub_covid19
unique(sub_covid19$vac_statut)
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut=="Primo dose récente",c("date","vac_statut","nb_PCR")][1:20,]
sub_covid19
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR)) + geom_line()
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
sub_covid19
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR, stat='identity'))
geom_line()
geom_line()?
?
/
?geom_line
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR, position='identity'))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR),stat='identity')
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR,group = 1),position='identity')
## Then subset the data
sub_covid19 = covid19[1:99,c("date","vac_statut","nb_PCR")]
sub_covid19
unique(sub_covid19$vac_statut)
## Then subset the data
sub_covid19 = covid19[1:60,c("date","vac_statut","nb_PCR")]
unique(sub_covid19$vac_statut)
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR,group = 1),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR,group = 7),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, linetype = variable))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, linetype = vac_statut))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, linetype = vac_statut, group=7))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=7))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(aes(color = vac_statut, group=5))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
sub_covid19
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line()
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=7))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=7))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=5))
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=1))
sub_covid19
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line()
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(group='vac_statut')
View(sub_covid19)
ggplot(sub_covid19, aes(x = date, y = nb_PCR, group=vac_statut,=color = vac_statut)) +
ggplot(sub_covid19, aes(x = date, y = nb_PCR, group=vac_statut,color = vac_statut)) +
geom_line(group='vac_statut')
unique(covid19$vac_statut)
unique(covid19$vac_statut)[1:5]
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut==unique(covid19$vac_statut)[1:5],c("date","vac_statut","nb_PCR")]1:60
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut==unique(covid19$vac_statut)[1:5],c("date","vac_statut","nb_PCR")][1:60]
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut %in% unique(covid19$vac_statut)[1:5],c("date","vac_statut","nb_PCR")][1:60]
covid19
View(movies)
data()
View(msleep)
View(Puromycin)
View(volcano)
View(AirPassengers)
render("file.Rmd")
render("README.Rmd")
install.packages("roxygen2")
library(shRek)
library(shRek)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
knit_with_parameters("~/Documents/shiny-app/shRek/README.Rmd")
Sys.getenv()
install.packages("~/Documents/shiny-app/shrek.tar.gz", repos = NULL, type = "source")
use_mit_license()
usethis::use_mit_license()
devtools::document().
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
