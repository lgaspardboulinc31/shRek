"Fiona",
"Donkey",
"Puss_in_Boots",
"Dragon",
"Gingy",
"Pinocchio",
#vilains
"Fairy_Godmother",
"Charming",
"Lord_Farquaad",
"Rumpelstiltskin",
#places
"Duloc",
"Far_Far_Away",
"Dragon_Keep",
"Swamp"
),
bio=c(
#heroes
"Our hero",
"The badass girl",
"Shrek's best friend",
"Shrek's adopted best friend",
"The keeper of Fiona and Donkey's lover",
"The bravest cookie",
"More human than you think",
# vilain
"The vilain in Shrek 2",
"The handsome son of Fairy Godmother",
"The vilain in Shrek 1",
"The vilain in Shrek 3",
#places
"Lord Farquaad's castle",
"Fiona's parent kingdom",
"Where Fiona has been locked",
"Shrek's House"
)
)
#' A Shrek palette generator
#'
#'
#'
#'
#'
#'
burp <- function(name,pal_class=c("Hero","Villain","Place"), n, type = c("discrete", "continuous")) {
type <- match.arg(type)
if (pal_class == "Hero"){
palettes=hero_palettes
}
else{
if (pal_class == "Villain"){
palettes=villain_palettes
}
else{
palettes=place_palettes
}
}
pal <- palettes[[name]]
if (is.null(pal))
stop("We do not have a palette with this name.")
if (missing(n)) {
n <- length(pal)
}
if (type == "discrete" && n > length(pal)) {
stop("Number of requested colors greater than what palette can offer")
}
out <- switch(type,
continuous = grDevices::colorRampPalette(pal)(n),
discrete = pal[1:n]
)
structure(out, class = "palette", name = name)
}
show_my_swamp<- function(pal, ...) {
# Info df imported while loading package
info_sub = info %>%
filter(palette_name == attributes(pal)$name)
n <- length(pal)
df <- data.frame(xvals = c(1:n), yvals = rep(1, n), text = pal[1:n])
ggplot(df, aes(x = xvals, y = yvals)) + #specifiy axis
geom_tile(fill = pal,
colour = "white",
linewidth = 3) +
geom_text(aes(label=text), color="black", nudge_y = -1) +
theme_void() +
coord_fixed(ratio=1) + #allow constant ratio x/y
theme(plot.title = element_text(hjust = 0.5, face="bold", size=20), #custom titles
plot.subtitle = element_text(hjust = 0.5, size=15, face="italic"),
legend.position = "none") +
labs(title = info_sub$palette_name, subtitle = info_sub$bio) +
theme(plot.margin = margin(0.5,0.5,1,0.5, "cm"))
}
library(shRek)
library(shRek)
ggplot(iris, mapping(y=Sepal.length, x=Species)) + geom_boxplot()
ggplot(iris, aes(y=Sepal.length, x=Species)) + geom_boxplot()
ggplot(iris, aes(y=Sepal.Length, x=Species)) + geom_boxplot()
ggplot(iris, aes(y=Sepal.Length, x=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
View(movies)
library(shRek)
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
#
show_my_swamp(shrek_color)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
library(shRek)
library(shRek)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=burp("Shrek",pal_class="Hero",n=3))
covid19 = read.csv("./data/covid19_drees_data.csv")
head(covid19)
covid19 = read.csv("./data/covid19_drees_data.csv", sep=";")
head(covid19)
## First let's pick Rumpelstiltskin palette
Rumpe_cols = burp("Rumpelstiltskin","Villain",n=3)
Rumpe_cols
show_my_swamp(Rumpe_cols)
covid19[1:60,]
# Make the plot
ggplot(data=covid19[1:60,], aes(x=date, y=nb_PCR, fill=vac_statut)) + geom_line()
# Make the plot
ggplot(data=covid19[1:60,], aes(x=date, y=nb_PCR)) + geom_line()
# Make the plot
ggplot() +
geom_line(data=covid19[1:60,"vac_statut"=="Primo dose récente"])
# Make the plot
ggplot() +
geom_line(data=covid19[1:60,"vac_statut"=="Primo dose récente"])
# Make the plot
ggplot() +
geom_line(data=covid19[1:60,covid19$vac_statut=="Primo dose récente"])
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",])
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",],aes(x=data, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",],aes(x=date, y=nb_PCR))
covid19[covid19$vac_statut=="Primo dose récente",]
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",nb_PCR],aes(x=date, y=nb_PCR))
covid19[covid19$vac_statut=="Primo dose récente",nb_PCR]
covid19[covid19$vac_statut=="Primo dose récente","nb_PCR"]
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente","nb_PCR"],aes(x=date, y=nb_PCR))
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR"],aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR")],aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR")],aes(x=date, y=nb_PCR))
summary(covid19)
ggplot(data=covid19, aes(x=date, y=nb_PCR))
ggplot(data=covid19, aes(x=date, y=nb_PCR))+ geom_point()
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut=="Primo dose récente",c("date","nb_PCR")]
sub_covid19
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut=="Primo dose récente",c("date","vac_statut","nb_PCR")]
sub_covid19
unique(sub_covid19$vac_statut)
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut=="Primo dose récente",c("date","vac_statut","nb_PCR")][1:20,]
sub_covid19
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR)) + geom_line()
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
sub_covid19
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR, stat='identity'))
geom_line()
geom_line()?
?
/
?geom_line
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR, position='identity'))
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR),stat='identity')
# Make the plot
ggplot() +
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR,group = 1),position='identity')
## Then subset the data
sub_covid19 = covid19[1:99,c("date","vac_statut","nb_PCR")]
sub_covid19
unique(sub_covid19$vac_statut)
## Then subset the data
sub_covid19 = covid19[1:60,c("date","vac_statut","nb_PCR")]
unique(sub_covid19$vac_statut)
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR,group = 1),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(data=sub_covid19,aes(x=date, y=nb_PCR,group = 7),position='identity')
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, linetype = variable))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, linetype = vac_statut))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, linetype = vac_statut, group=7))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=7))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))
ggplot(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))+
geom_line(aes(color = vac_statut, group=5))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR))+
geom_line(aes(color = vac_statut, group=5))#+
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
sub_covid19
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line()
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=7))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=7))
# Make the plot
ggplot() +
geom_point(data=sub_covid19,aes(x=date, y=nb_PCR, color=vac_statut))#+
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=5))
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(aes(group=1))
sub_covid19
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line()
ggplot(sub_covid19, aes(x = date, y = nb_PCR, color = vac_statut)) +
geom_line(group='vac_statut')
View(sub_covid19)
ggplot(sub_covid19, aes(x = date, y = nb_PCR, group=vac_statut,=color = vac_statut)) +
ggplot(sub_covid19, aes(x = date, y = nb_PCR, group=vac_statut,color = vac_statut)) +
geom_line(group='vac_statut')
unique(covid19$vac_statut)
unique(covid19$vac_statut)[1:5]
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut==unique(covid19$vac_statut)[1:5],c("date","vac_statut","nb_PCR")]1:60
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut==unique(covid19$vac_statut)[1:5],c("date","vac_statut","nb_PCR")][1:60]
## Then subset the data
sub_covid19 = covid19[covid19$vac_statut %in% unique(covid19$vac_statut)[1:5],c("date","vac_statut","nb_PCR")][1:60]
covid19
View(movies)
data()
View(msleep)
View(Puromycin)
View(volcano)
View(AirPassengers)
render("file.Rmd")
render("README.Rmd")
install.packages("roxygen2")
library(shRek)
library(shRek)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
knit_with_parameters("~/Documents/shiny-app/shRek/README.Rmd")
Sys.getenv()
install.packages("~/Documents/shiny-app/shrek.tar.gz", repos = NULL, type = "source")
use_mit_license()
usethis::use_mit_license()
devtools::document().
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Pick colors
shrek_pal = burp("Shrek",pal_class="Hero",n=3)
library(shRek)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
# Pick colors
shrek_pal = burp("Shrek",pal_class="Hero",n=3)
#Do Plot
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=shrek_pal)
library(shRek)
library(ggplot2)
# burp allows to extract color palette from the ones available
shrek_color <- burp("Shrek", pal_class="Hero", n=6)
# show_my_swamp displays the palette in a nice way
show_my_swamp(shrek_color)
# Pick colors
shrek_pal = burp("Shrek",pal_class="Hero",n=3)
#Do Plot
ggplot(iris, aes(y=Sepal.Length, x=Species, fill=Species)) + geom_boxplot() +
scale_fill_manual(values=shrek_pal)
villain_palettes
pal= burp("Lord_Farquaad","Villain",n=4)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=.4) +
theme_ipsum() + scale_fill_manual(values=pal)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=.4)  + scale_fill_manual(values=pal)
pal= burp("Lord_Farquaad","Villain",n=5)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=.4)  + scale_fill_manual(values=pal)
pal= burp("Fairy_Godmother","Villain",n=5)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=.4)  + scale_fill_manual(values=pal)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5)  + scale_fill_manual(values=pal)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=0.2)  + scale_fill_manual(values=pal)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=0.6)  + scale_fill_manual(values=pal)
# With transparency (right)
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
geom_density(adjust=1.5, alpha=0.7)  + scale_fill_manual(values=pal)
# Library
library(tidyverse)
# Data
a <- data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 10, 1.2) )
b <- data.frame( x=rnorm(20000, 14.5, 1.9), y=rnorm(20000, 14.5, 1.9) )
c <- data.frame( x=rnorm(20000, 9.5, 1.9), y=rnorm(20000, 15.5, 1.9) )
data <- rbind(a,b,c)
ggplot(data, aes(x=x, y=y) ) +
geom_hex() +
theme_bw()
# Library
library(tidyverse)
# Data
a <- data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 10, 1.2) )
b <- data.frame( x=rnorm(20000, 14.5, 1.9), y=rnorm(20000, 14.5, 1.9) )
c <- data.frame( x=rnorm(20000, 9.5, 1.9), y=rnorm(20000, 15.5, 1.9) )
data <- rbind(a,b,c)
ggplot(data, aes(x=x, y=y) ) +
geom_point()
# Library
library(tidyverse)
# Data
a <- data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 10, 1.2) )
b <- data.frame( x=rnorm(20000, 14.5, 1.9), y=rnorm(20000, 14.5, 1.9) )
data <- rbind(a,b)
ggplot(data, aes(x=x, y=y) ) +
geom_point()
data()
head(LifeCycleSavings)
head(UCBAdmissions)
head(USAccDeaths)
USAccDeaths
WorldPhones
# Let pick Dragon_Keep palette
dragon <- burp("Dragon_Keep", pal_class = "Place", n=6)
show_my_swamp(dragon)
# Make plot
ggplot(data=t(WorldPhones), aes(x=)) + geom_point()
t(WorldPhones)
# Make plot
ggplot(data=t(WorldPhones), aes(x=1951)) + geom_point()
# Make plot
ggplot(data=as.data.frame(t(WorldPhones)), aes(x=1951)) + geom_point()
# Make plot
ggplot(data=as.data.frame(t(WorldPhones)), aes(x=1951)) + geom_point(stat="identity")
# Make plot
ggplot(data=as.data.frame(t(WorldPhones)), aes(x=1951)) + geom_point(stat="count")
library(reshape2)
WorldPhones.m = melt(WorldPhones)
colnames(WorldPhones.m) = c("Year", "Continent", "Phones")
head(WorldPhones.m)
# Make plot
ggplot(WorldPhones.m, aes(x=Year, y=Phones, color=Continent)) + geom_line()
# Make plot
ggplot(WorldPhones.m, aes(x=Year, y=Phones, color=Continent)) + geom_line() + scale_color_manual(values=dragon)
WorldPhones.m
# Let pick Dragon_Keep palette
dragon <- c(burp("Dragon_Keep", pal_class = "Place", n=6),burp("Dragon", pal_class = "Hero", n=1))
show_my_swamp(dragon)
# Make plot
ggplot(WorldPhones.m, aes(x=Year, y=Phones, color=Continent)) + geom_line() + scale_color_manual(values=dragon)
download_mammoth10k()
devtools::install("jlmelville/snedata")
remotes::install_github("jlmelville/snedata")
remotes::install_github("jlmelville/snedata")
install.packages("remotes")
remotes::install_github("jlmelville/snedata")
Sys.getenv("GITHUB_PAT")
my-git = Sys.getenv("GITHUB_PAT")
my_git = Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
remotes::install_github("jlmelville/snedata")
mammoth <- download_mammoth10k()
library(snedata)
mammoth <- download_mammoth10k()
Sys.getenv("GITHUB_PAT") <- my_git
quotes <- read.csv("./data.quotes_all.csv")
setwd("~/Documents/shiny-app/shRek")
quotes <- read.csv("./data.quotes_all.csv")
quotes <- read.csv("./data/quotes_all.csv")
document()
quotes
#' @title Quotes
#' @description List of quotes
#' @export
#'
quotes <- read.csv("./data/quotes_all.csv", sep=";")
quotes
quotes[1:5]
quotes[1:5,]
quotes$type
echo_shrek <- function(who=c("Shrek","Donkey", None), type=c("Funny","Mean","Sweet",None)){
}
echo_shrek <- function(who=c("Shrek","Donkey", None), type=c("Funny","Mean","Sweet",None)){
# Math arg
who <- match.arg(who)
type <- match.arg(type)
# Available people
people=c("Shrek","Donkey")
types = c("Funny","Mean","Sweet",None)
if (who == None){
who = sample(people,1)
}
if (type == None){
type = sample(types,1)
}
q <- quotes[quotes$who == who & quotes$type == type,]
print(q$quote)
}
echo_shrek("Shrek","Mean")
